#include<stdio.h>
#include<conio.h>
#include<process.h>
#define MAX 5
#define NIL -1
typedef struct queuetype
{
 int a[5];
 int front;
 int rear;
}queue;
void main()
{
int x,item,choice;
queue cq;
cq.front=-1;
cq.rear=-1;

void insertincqueue(queue *,int);
int deleteincqueue(queue *);
int is_cqueuefull(queue *);
int is_cqueueempty(queue *);
while(1)
{
clrscr();
printf("\n1.Insertion");
printf("\n2.Deletion");
printf("\n3.Exit");
printf("\nEnter your choice");
scanf("%d",&choice);

switch(choice)
{
 case 1:
	x=is_cqueuefull(&cq);
	if(x==1)
	{
	 printf("Queue is full");
	}
	else
	{
	 printf("Insert the element");
	 scanf("%d",&item);
	 insertincqueue(&cq,item);
	}
	break;
 case 2:
	x=is_cqueueempty(&cq);
	if(x==1)
	{
	 printf("Queue is empty");
	}
	else
	{
	item=deleteincqueue(&cq);
	printf("Deleted item is: %d",item);
	}
	break;
 case 3:
	exit(1);
 default:
	 printf("Invalid Number");
}
getch();
}
}

 int is_cqueuefull(queue *cq)
 {
  if((cq->front==0 && cq->rear== MAX-1)||(cq->front-cq->rear==1))
  {
   return 1;
  }
  else
  {
   return 0;
  }
 }
 int is_cqueueempty(queue *cq)
 {
  if(cq->front==-1 && cq->rear==-1)
  {
   return 1;
  }
  else
  {
   return 0;
  }
 }
 void insertincqueue(queue *cq,int item)
 {
  int i;
  if(cq->front==-1 && cq->rear==-1)
  {
   cq->front=cq->front+1;
   cq->rear=cq->rear+1;
  }
  else if(cq->rear==MAX-1)
  {
   cq->rear=0;
  }
  else
  {
   cq->rear=cq->rear+1;
  }
   cq->a[cq->rear]=item;
 }
 int deleteincqueue(queue *cq)
 {
  int item;
  item=cq->a[cq->front];
  if(cq->front==cq->rear)
  {
   cq->front=cq->rear=-1;
  }
  else if(cq->front==MAX-1)
  {
   cq->front=0;
  }
  else
  {
   cq->front=cq->front+1;
  }
  return item;
 }
